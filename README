App PHP dans 3 Docker containers : PHP8.2-Apache, mysql, phpmyadmin
-------------------------------------------------------------------

DEMO :
=====

1. Lancer Docker Desktop et delete les containers existants
2. taper docker-compose up dans un cmder ouvert dans ce projet
     http://localhost/display-message.php?message=mathias2
     http://localhost:8080  // phpmyadmin
     http://localhost/insert_to_db.php


Tutos:
https://www.youtube.com/watch?v=xgFu26FWx5Y&ab_channel=Abstractprogrammer
https://www.youtube.com/watch?v=2ygog4MHXws&t=806s


Docker de A à Z :
===============

Create a container      (pour les options : docker run --help)
------------------

// -d détache (run in background), -p ports, php-cont is the name I give to the container ("cont" for container)
docker run -d -p 80:80 --name php-cont php:apache

// -i keep CLI open, -t  Allocate a pseudo-TTY, bin/bash is the program that will be executed
docker exec -it php-cont /bin/bash    

root@1aa0588f7294:/var/www/html# apt update  // update the packages

root@1aa0588f7294:/var/www/html# apt install nano

nano index.php

		<?php
             phpinfo();
		?>

Open http://localhost:80


But this container is not persistent, so if we close it, our index.php will disappear.

To make a persistent container we need the -v (for volume) flag, and map a local (Windows) folder to the container /var/www/html folder

- create a folder dotdev in the host (windows), and add some php files

- remove all stopped containers  'docker container prune'

- docker run -d -p 80:80 -v C:/Users/matha/Desktop/Projects/docker-project/dotdev:/var/www/html --name php-cont php:apache

- http://localhost/display-message.php?message=mathias


Create a MySQL container 
------------------------

docker run -d -v C:/Users/matha/Desktop/Projects/docker-project/DB:/var/lib/mysql --name mysql-cont -e MYSQL_ROOT_PASSWORD=pw mysql

To connect the mysql-cont from our php-cont or from our phpmyadmin (see below) we need its IP address

docker inspect mysql-con | findstr IPAddr   --->   172.17.0.3

To connect and test php-cont to mysql-cont, we need a db to connect to, and a table to insert or select rows

So let's create PHPMYADMIN container to do that 


Create a phpmyadmin container and connect it to our new mysql server
--------------------------------------------------------------------

docker run -d --name phpmyadmin -e PMA_HOST=172.17.0.3 -p 8080:80 phpmyadmin     // -d detach, -e environment, -p ports

open http:localhost:8080     (user root - password pw)

create a new db and table in phpmyadmin

Create the file insert_to_db.php in the dotdev folder

then go to localhost:80/insert_to_db.php 

this will give an error because the mysqli php extension is not yet installed

we could install the mysqli extension manually in the bash

but if we do that, each time we restart the container, we will have to install again the mysql php extension

as everything we install localy in the container is temporary, that's why we do that by creating a Dockerfile !
        
        FROM php:apache
        RUN docker-php-ext-install mysqli
        EXPOSE 80


docker container ls
docker stop php-cont
docker container prune             // this will remove the stopped container (php-cont) but not the others (mysql-con and phpmyadmin)

// create an image named 'apache-mysqli' based on our new created dockerfile located in . current folder
docker build -t apache-mysqli .    // -t tag

// and create the new container based on this new image
docker run -d -p 80:80 -v C:/Users/matha/Desktop\Projects\docker-project\dotdev:/var/www/html  --name php-cont apache-mysqli

since we use a VOLUME (-v) the php files are available right away, go again to localhost/insert_to_db.php


We can streamline this whole process by creating and using a docker-compose.yml file !


delete all containers (mysql-con, phpmyadmin, php-con) in Docker Desktop and execute the docker-compose.yml

docker compose up -d

ATTENTION, il faut changer le nom du server sql dans insert_to_db.php  de '173.17.0.3'  en  'mysql'
ET recréé la db example_db et la table example_table

3. Explications du docker-compose.yml :

services:                           // les 3 containers
  apache-php:                       // le nom que je décide de donner à mon premier container/service
    image: apache-mysqli            // ce container/service sera monté avec l'image (que je baptise apache-msqli) que je build avec le Dockerfile qui, lui, pull l'image php:apache (php 8 + Apache) de la registry (hub.docker.com) et y installe/active l'extension php msqli
    builC:/Users/matha/Desktop
      context: .
      dockerfile: Dockerfile
    volumes:
      - C:/Users/matha/Desktop/Projects/docker-project/dotdev:/var/www/html         // mapping du folder web local au folder root de Apache dans le container 
    ports:
      - "80:80"
    networks:
      - app-network                         // les containers qui partagent un réseau leur permettent de s'accéder via leur nom de service (aka apache-php, mysql, phpmyadmin) 

  mysql:
    image: mysql                            // ce container sera monté avec l'image "mysql" de la registry (hub.docker.com)
    volumes:
      - C:/Users/matha/Desktop/Projects/docker-project/DB:/var/lib/mysql
    restart: always
    environment:
      MYSQL_ROOT_PASSWORC:/Users/matha/Desktop pw
    networks:
      - app-network

  phpmyadmin:
    image: phpmyadmin
    ports:
      - "8080:80"
    environment:
      PMA_HOST: mysql
    depends_on:
      - mysql
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
